---
- name: Set required facts
  ansible.builtin.set_fact:
    aws_region: us-east-1
    dmz_ssh_key_name: aws-test-key
    priv_network_ssh_key_name: aws-test-key

- name: Test Peer Network Deployment
  block:
    - name: Create Peer Network
      ansible.builtin.include_role:
        name: lab.aws_infrastructure_config_demos..manage_direct_peered_networks
      vars:
        manage_direct_peered_networks_operation: create

    - name: Check VPCs
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:deployment": ansible
          "tag:ansible-role": direct_peered_networks
        region: "{{ aws_region }}"
      register: vpc_result

    - name: Assert that there are at least two VPCs that exist
      ansible.builtin.assert:
        that:
          - vpc_result.vpcs | length >= 2

    - name: Get all vpc peers with specific filters
      community.aws.ec2_vpc_peering_info:
        filters:
          "tag:deployment": ansible
          "tag:ansible-role": direct_peered_networks
          status-code:
            - active
        region: "{{ aws_region }}"
      register: vpc_peers_result

    - name: Assert that there are at least one active VPC peers
      ansible.builtin.assert:
        that:
          - vpc_result.vpcs | length >= 1

    - name: Gather information about all instances in region
      amazon.aws.ec2_instance_info:
        filters:
          "tag:deployment": ansible
          "tag:ansible-role": direct_peered_networks
        region: "{{ aws_region }}"
      register: ec2_result

    - name: Assert that there are at least two EC2 instances
      ansible.builtin.assert:
        that:
          - vpc_result.vpcs | length >= 2

  always:
    - name: Delete Peer Network
      ansible.builtin.include_role:
        name: lab.aws_infrastructure_config_demos..manage_direct_peered_networks
      vars:
        manage_direct_peered_networks_operation: delete
